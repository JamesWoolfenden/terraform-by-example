{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Terraform-by-example Note Terraform can be a real handful to type at the CLI, but at least its not constellation as originally planned.","title":"Home"},{"location":"#welcome-to-terraform-by-example","text":"Note Terraform can be a real handful to type at the CLI, but at least its not constellation as originally planned.","title":"Welcome to Terraform-by-example"},{"location":"about/","text":"About Author: James Woolfenden LinkedIn Bio I'm currently working as a Solution Principal for Slalom and based out of London. I have a bit of experience in the DevOps field, I have worked for a number of consultancies directly and indirectly. This is the second of series on Learning about DevOps. Why This is small run through of using Hashicorp Terraform. As a consultant I frequently have to train developers and \"DevOps\" Engineers how, why and when to use it. I started using Terraform from around version 0.5, I was on a Greenfield AWS project and was really struggling with Cloudformation and its tooling. I asked a question on Linkedin on what others were using and the steers I got were Terraform or Ansible. I achieved more in the day after than in the previous week. Hopefully you'll find this book useful. If it's missing or wrong in anyway, log an Issue or even submit a PR. Each Chapter also contains a copy of the code the chapter tries to teach you how to create. I originally wrote this for the pre 0.11 Terraform and I hopefully updated everything to 0.12 and all the samples should work.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#author-james-woolfenden","text":"LinkedIn","title":"Author: James Woolfenden"},{"location":"about/#bio","text":"I'm currently working as a Solution Principal for Slalom and based out of London. I have a bit of experience in the DevOps field, I have worked for a number of consultancies directly and indirectly. This is the second of series on Learning about DevOps.","title":"Bio"},{"location":"about/#why","text":"This is small run through of using Hashicorp Terraform. As a consultant I frequently have to train developers and \"DevOps\" Engineers how, why and when to use it. I started using Terraform from around version 0.5, I was on a Greenfield AWS project and was really struggling with Cloudformation and its tooling. I asked a question on Linkedin on what others were using and the steers I got were Terraform or Ansible. I achieved more in the day after than in the previous week. Hopefully you'll find this book useful. If it's missing or wrong in anyway, log an Issue or even submit a PR. Each Chapter also contains a copy of the code the chapter tries to teach you how to create. I originally wrote this for the pre 0.11 Terraform and I hopefully updated everything to 0.12 and all the samples should work.","title":"Why"},{"location":"help/","text":"Help If its been useful, let me know. If it out of date or broken also. I'll appreciate it. Or If you think somethings missing or contribute? Got a question? File a GitHub issue . Contributing Bug Reports & Feature Requests Please use the issue tracker to report any bugs or file feature requests. Copyrights Copyright \u00a9 2019-2020 Slalom, LLC License Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contributors James Woolfenden","title":"Help"},{"location":"help/#help","text":"If its been useful, let me know. If it out of date or broken also. I'll appreciate it. Or If you think somethings missing or contribute? Got a question? File a GitHub issue .","title":"Help"},{"location":"help/#contributing","text":"","title":"Contributing"},{"location":"help/#bug-reports-feature-requests","text":"Please use the issue tracker to report any bugs or file feature requests.","title":"Bug Reports &amp; Feature Requests"},{"location":"help/#copyrights","text":"Copyright \u00a9 2019-2020 Slalom, LLC","title":"Copyrights"},{"location":"help/#license","text":"Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"help/#contributors","text":"James Woolfenden","title":"Contributors"},{"location":"lesson1/","text":"Lesson 1 my first template: hello world Make a null resource, create a file called null_resource.helloworld.tf touch null_resource.helloworld.tf Then add the block below to it. resource \"null_resource\" \"hello_world\" { } You have created your first Terraform template, but it does nothing yet. Add a local executable provisioner: resource \"null_resource\" \"hello_world\" { provisioner \"local-exec\" { # This is a comment command = \"echo 'hello world'\" } } Time to try our work with terraform init . $ terraform init Initializing the backend... Initializing provider plugins... - Checking for available provider plugins... - Downloading plugin for provider \"null\" ( hashicorp/null ) 2 .1.2... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.null: version = \"~> 2.1\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Now that has been set up your can terraform apply , check when prompted and say yes. $ terraform apply An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes null_resource.hello_world: Creating... null_resource.hello_world: Provisioning with 'local-exec' ... null_resource.hello_world ( local-exec ) : Executing: [ \"cmd\" \"/C\" \"echo 'hello world'\" ] null_resource.hello_world ( local-exec ) : 'hello world' null_resource.hello_world: Creation complete after 1s [ id = 5019739039794330655 ] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. You have make a terraform template that does something! files Now check your filesystem ls -al total 1 drwxrwxrwx 1 jim jim 512 Feb 22 06:59 . drwxrwxrwx 1 jim jim 512 Feb 22 06:54 .. drwxrwxrwx 1 jim jim 512 Feb 22 06:56 .terraform -rwxrwxrwx 1 jim jim 139 Feb 22 06:59 null.helloworld.tf -rwxrwxrwx 1 jim jim 513 Feb 22 06:59 terraform.tfstate local state file .terraform refactor specify the exact provider required provider.null.tf provider \"null\" { version=\"2.1.2\" } fix tf version by specifying Terraform version in terraform.tf terraform { required_version=\"0.12.20\" } test Real world example resource \"null_resource\" \"waiter\" { depends_on = [aws_iam_instance_profile.ec2profile] provisioner \"local-exec\" { command = \"sleep 15\" } } This is basically a hack, pretty much any use of a null resources is up to something dubious. In this case AWS was being rubbish and reported that an object was made when it wasn't yet - eventually consistent and so here we are with a sleep statement. I rarely use Provisioners myself these days, they are bad style and a hangover from Terraforms beginnings. Takeaways Naming Versions Provisioners Providers Plan & apply Questions Documentation https://www.terraform.io/docs/providers/null/resource.html","title":"lesson1"},{"location":"lesson1/#lesson-1","text":"","title":"Lesson 1"},{"location":"lesson1/#my-first-template-hello-world","text":"Make a null resource, create a file called null_resource.helloworld.tf touch null_resource.helloworld.tf Then add the block below to it. resource \"null_resource\" \"hello_world\" { } You have created your first Terraform template, but it does nothing yet. Add a local executable provisioner: resource \"null_resource\" \"hello_world\" { provisioner \"local-exec\" { # This is a comment command = \"echo 'hello world'\" } } Time to try our work with terraform init . $ terraform init Initializing the backend... Initializing provider plugins... - Checking for available provider plugins... - Downloading plugin for provider \"null\" ( hashicorp/null ) 2 .1.2... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.null: version = \"~> 2.1\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Now that has been set up your can terraform apply , check when prompted and say yes. $ terraform apply An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes null_resource.hello_world: Creating... null_resource.hello_world: Provisioning with 'local-exec' ... null_resource.hello_world ( local-exec ) : Executing: [ \"cmd\" \"/C\" \"echo 'hello world'\" ] null_resource.hello_world ( local-exec ) : 'hello world' null_resource.hello_world: Creation complete after 1s [ id = 5019739039794330655 ] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. You have make a terraform template that does something! files Now check your filesystem ls -al total 1 drwxrwxrwx 1 jim jim 512 Feb 22 06:59 . drwxrwxrwx 1 jim jim 512 Feb 22 06:54 .. drwxrwxrwx 1 jim jim 512 Feb 22 06:56 .terraform -rwxrwxrwx 1 jim jim 139 Feb 22 06:59 null.helloworld.tf -rwxrwxrwx 1 jim jim 513 Feb 22 06:59 terraform.tfstate local state file .terraform refactor specify the exact provider required provider.null.tf provider \"null\" { version=\"2.1.2\" } fix tf version by specifying Terraform version in terraform.tf terraform { required_version=\"0.12.20\" } test","title":"my first template: hello world"},{"location":"lesson1/#real-world-example","text":"resource \"null_resource\" \"waiter\" { depends_on = [aws_iam_instance_profile.ec2profile] provisioner \"local-exec\" { command = \"sleep 15\" } } This is basically a hack, pretty much any use of a null resources is up to something dubious. In this case AWS was being rubbish and reported that an object was made when it wasn't yet - eventually consistent and so here we are with a sleep statement. I rarely use Provisioners myself these days, they are bad style and a hangover from Terraforms beginnings. Takeaways Naming Versions Provisioners Providers Plan & apply","title":"Real world example"},{"location":"lesson1/#questions","text":"","title":"Questions"},{"location":"lesson1/#documentation","text":"https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson2/","text":"Lesson 2 Variables Modify the lesson1 code to use a variable. resource \"null_resource\" \"hello_world\" { provisioner \"local-exec\" { # This is a comment command = \"echo 'hello world from ${ var . USERNAME } '\" } } You don't need to run Terraform init as there's been no change to providers or modules, so its straight to using apply. $terraform apply Error: Reference to undeclared input variable on null_resource.helloworld.tf line 4, in resource \"null_resource\" \"hello_world\": 4: command = \"echo 'hello world from ${ var . user } '\" An input variable with the name \"user\" has not been declared. This variable can be declared with a variable \"user\" {} block. That didn't work. You need to declare the variable USERNAME, you could just add the block below to any Terraform file, but the correct way is to add a file called variables.tf and use that. This is a convention. variable \"user\" { type=string } And apply. $ terraform apply var.user Enter a value: You could work with Terraform like this, and type in the values each time it runs. Thankfully, there are other options. defaults Modify your variable declaration to have a default value. variable \"user\" { type=string default=\"DEFAULT\" } overrides terraform apply -var \"user=SHELL\" What happened? terraform apply -var 'user=SHELL' null_resource.hello_world: Refreshing state... [id=5019739039794330655] Apply complete! Resources: 0 added, 0 changed, 0 destroyed. What should have happened? Hopefully a different output showing the new value, so why didn't it? This is Because you're using a shell command in a null resource there is no state record. Check your state file terraform.tfstate { \"version\" : 4 , \"terraform_version\" : \"0.12.20\" , \"serial\" : 10 , \"lineage\" : \"10c120f2-386d-3c02-5395-9b2b9e26c5ec\" , \"outputs\" : {}, \"resources\" : [ { \"mode\" : \"managed\" , \"type\" : \"null_resource\" , \"name\" : \"hello_world\" , \"provider\" : \"provider.null\" , \"instances\" : [ { \"schema_version\" : 0 , \"attributes\" : { \"id\" : \"1300466885639272531\" , \"triggers\" : null }, \"private\" : \"bnVsbA==\" } ] } ] } Destroy your template: $terraform destroy null_resource.hello_world: Refreshing state... [id=7244294109451146186] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # null_resource.hello_world will be destroyed - resource \"null_resource\" \"hello_world\" { - id = \"7244294109451146186\" -> null } Plan: 0 to add, 0 to change, 1 to destroy. Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only 'yes' will be accepted to confirm. Enter a value: yes null_resource.hello_world: Destroying... [id=7244294109451146186] null_resource.hello_world: Destruction complete after 0s``` Now try supplying value again and it will work: $ terraform apply -var 'user=SHELL' An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes null_resource.hello_world: Creating... null_resource.hello_world: Provisioning with 'local-exec' ... null_resource.hello_world ( local-exec ) : Executing: [ \"cmd\" \"/C\" \"echo 'hello world from SHELL'\" ] null_resource.hello_world ( local-exec ) : 'hello world from SHELL' null_resource.hello_world: Creation complete after 0s [ id = 4486592786807831720 ] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. environmental variables Add an environmental variable to your shell call TF_VAR_user to your shell. export TF_VAR_user=\"environment\" or $env:TF_VAR_user=\"environment\" And apply. $ export TF_VAR_user = \"environment\" \u2714 /mnt/c/code/mkdocs/terraform-by-example/examples/lesson2 [ master L | \u20269 ] 09 :29 $ terraform apply An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: So Terraform looks for the values of your variables as long as they have the prefix TF_VAR_ but there are exceptions. tfvars Terraform can also take the values of variables from a tfvars file. Make sure to erase your environmental variables from the previous section. Add a file called guff.tfvars ```file \"guff.tfvars\" user=\"guff\" An apply. ```cli $ terraform apply var.user Enter a value: So that didn't work. There's a convention, the old convention is to use a file called terraform.tfvars but you can multiple tfvar files as long as they have auto in their name. Rename guff.tfvars guff.auto.tfvars . Takeaways variables overrides syntax checking outputs defaults cli environmental variables tfvars state with null resource local execs are contents not infrastructure so there's no record in state with supplied variable covert to template add in first use of module http.ip change to lambda format python archive for lambda","title":"lesson2"},{"location":"lesson2/#lesson-2","text":"","title":"Lesson 2"},{"location":"lesson2/#variables","text":"Modify the lesson1 code to use a variable. resource \"null_resource\" \"hello_world\" { provisioner \"local-exec\" { # This is a comment command = \"echo 'hello world from ${ var . USERNAME } '\" } } You don't need to run Terraform init as there's been no change to providers or modules, so its straight to using apply. $terraform apply Error: Reference to undeclared input variable on null_resource.helloworld.tf line 4, in resource \"null_resource\" \"hello_world\": 4: command = \"echo 'hello world from ${ var . user } '\" An input variable with the name \"user\" has not been declared. This variable can be declared with a variable \"user\" {} block. That didn't work. You need to declare the variable USERNAME, you could just add the block below to any Terraform file, but the correct way is to add a file called variables.tf and use that. This is a convention. variable \"user\" { type=string } And apply. $ terraform apply var.user Enter a value: You could work with Terraform like this, and type in the values each time it runs. Thankfully, there are other options.","title":"Variables"},{"location":"lesson2/#defaults","text":"Modify your variable declaration to have a default value. variable \"user\" { type=string default=\"DEFAULT\" }","title":"defaults"},{"location":"lesson2/#overrides","text":"terraform apply -var \"user=SHELL\" What happened? terraform apply -var 'user=SHELL' null_resource.hello_world: Refreshing state... [id=5019739039794330655] Apply complete! Resources: 0 added, 0 changed, 0 destroyed. What should have happened? Hopefully a different output showing the new value, so why didn't it? This is Because you're using a shell command in a null resource there is no state record. Check your state file terraform.tfstate { \"version\" : 4 , \"terraform_version\" : \"0.12.20\" , \"serial\" : 10 , \"lineage\" : \"10c120f2-386d-3c02-5395-9b2b9e26c5ec\" , \"outputs\" : {}, \"resources\" : [ { \"mode\" : \"managed\" , \"type\" : \"null_resource\" , \"name\" : \"hello_world\" , \"provider\" : \"provider.null\" , \"instances\" : [ { \"schema_version\" : 0 , \"attributes\" : { \"id\" : \"1300466885639272531\" , \"triggers\" : null }, \"private\" : \"bnVsbA==\" } ] } ] } Destroy your template: $terraform destroy null_resource.hello_world: Refreshing state... [id=7244294109451146186] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # null_resource.hello_world will be destroyed - resource \"null_resource\" \"hello_world\" { - id = \"7244294109451146186\" -> null } Plan: 0 to add, 0 to change, 1 to destroy. Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only 'yes' will be accepted to confirm. Enter a value: yes null_resource.hello_world: Destroying... [id=7244294109451146186] null_resource.hello_world: Destruction complete after 0s``` Now try supplying value again and it will work: $ terraform apply -var 'user=SHELL' An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes null_resource.hello_world: Creating... null_resource.hello_world: Provisioning with 'local-exec' ... null_resource.hello_world ( local-exec ) : Executing: [ \"cmd\" \"/C\" \"echo 'hello world from SHELL'\" ] null_resource.hello_world ( local-exec ) : 'hello world from SHELL' null_resource.hello_world: Creation complete after 0s [ id = 4486592786807831720 ] Apply complete! Resources: 1 added, 0 changed, 0 destroyed.","title":"overrides"},{"location":"lesson2/#environmental-variables","text":"Add an environmental variable to your shell call TF_VAR_user to your shell. export TF_VAR_user=\"environment\" or $env:TF_VAR_user=\"environment\" And apply. $ export TF_VAR_user = \"environment\" \u2714 /mnt/c/code/mkdocs/terraform-by-example/examples/lesson2 [ master L | \u20269 ] 09 :29 $ terraform apply An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: So Terraform looks for the values of your variables as long as they have the prefix TF_VAR_ but there are exceptions.","title":"environmental variables"},{"location":"lesson2/#tfvars","text":"Terraform can also take the values of variables from a tfvars file. Make sure to erase your environmental variables from the previous section. Add a file called guff.tfvars ```file \"guff.tfvars\" user=\"guff\" An apply. ```cli $ terraform apply var.user Enter a value: So that didn't work. There's a convention, the old convention is to use a file called terraform.tfvars but you can multiple tfvar files as long as they have auto in their name. Rename guff.tfvars guff.auto.tfvars . Takeaways variables overrides syntax checking outputs defaults cli environmental variables tfvars state with null resource local execs are contents not infrastructure so there's no record in state with supplied variable covert to template add in first use of module http.ip change to lambda format python archive for lambda","title":"tfvars"}]}